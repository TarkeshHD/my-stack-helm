# Default values for backend.

# ------------------------------------------------------------------------------------
# Replica settings
# ------------------------------------------------------------------------------------
replicaCount: 1

# ------------------------------------------------------------------------------------
# Image
# ------------------------------------------------------------------------------------
image:
  # TODO: replace with your pushed image (e.g. ghcr.io/TarkeshHD/backend-automation)
  repository: backend-automation
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# ------------------------------------------------------------------------------------
# Service Account
# ------------------------------------------------------------------------------------
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# ------------------------------------------------------------------------------------
# Pod labels/annotations & security
# ------------------------------------------------------------------------------------
podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop: [ "ALL" ]
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# ------------------------------------------------------------------------------------
# Networking
# ------------------------------------------------------------------------------------
# Container port your app listens on. Your Deployment template should name this port "http".
containerPort: 8080

service:
  type: ClusterIP
  annotations: {}
  port: 8080        # Service port exposed inside the cluster
  # targetPort should map to the named port in the container spec (http)
  targetPort: http

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# ------------------------------------------------------------------------------------
# Resources
# ------------------------------------------------------------------------------------
resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 200m
  #   memory: 256Mi

# ------------------------------------------------------------------------------------
# Probes (make sure your Deployment wires these via toYaml)
# ------------------------------------------------------------------------------------
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 2
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 2
  failureThreshold: 3
  successThreshold: 1

# ------------------------------------------------------------------------------------
# Autoscaling (HPA v2)
# ------------------------------------------------------------------------------------
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
  # Optional behavior block (if your HPA template supports it)
  # behavior:
  #   scaleUp:
  #     stabilizationWindowSeconds: 0
  #     policies:
  #       - type: Percent
  #         value: 100
  #         periodSeconds: 60
  #   scaleDown:
  #     stabilizationWindowSeconds: 300
  #     policies:
  #       - type: Percent
  #         value: 50
  #         periodSeconds: 60

# ------------------------------------------------------------------------------------
# Environment & args (wire these in your Deployment with toYaml)
# ------------------------------------------------------------------------------------
env: []
  # - name: NODE_ENV
  #   value: "production"
  # - name: MONGODB_URI
  #   valueFrom:
  #     secretKeyRef:
  #       name: mongodb-conn
  #       key: uri

envFrom: []
  # - secretRef:
  #     name: backend-secrets
  # - configMapRef:
  #     name: backend-config

args: []
  # - "--log-level=info"

# ------------------------------------------------------------------------------------
# Volumes & mounts
# ------------------------------------------------------------------------------------
volumes: []
  # - name: app-config
  #   configMap:
  #     name: backend-config

volumeMounts: []
  # - name: app-config
  #   mountPath: /app/config
  #   readOnly: true

# ------------------------------------------------------------------------------------
# Scheduling
# ------------------------------------------------------------------------------------
nodeSelector: {}
tolerations: []
affinity: {}

topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: "topology.kubernetes.io/zone"
  #   whenUnsatisfiable: "ScheduleAnyway"
  #   labelSelector: {}

# ------------------------------------------------------------------------------------
# Pod Disruption Budget (optional; add a template if you want to use this)
# ------------------------------------------------------------------------------------
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# ------------------------------------------------------------------------------------
# Update strategy (if your Deployment template supports it)
# ------------------------------------------------------------------------------------
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 25%
